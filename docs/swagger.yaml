openapi: 3.0.0
info:
  title: Order Management API
  version: 1.0.0
  description: API documentation for the Order Management System
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /orders:
    get:
      summary: Retrieve a list of orders
      tags: [Orders]
      parameters:
        - in: query
          name: customerName
          schema:
            type: string
          description: Filter orders by customer name
        - in: query
          name: orderDate
          schema:
            type: string
            format: date
          description: Filter orders by order date
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of results per page
      responses:
        '200':
          description: A paginated list of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrdersResponse'
        '500':
          description: Server error
    post:
      summary: Create a new order
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerName:
                  type: string
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                      quantity:
                        type: integer
      responses:
        '201':
          description: The created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailDto'
        '400':
          description: Invalid input
        '500':
          description: Server error
  /orders/{id}:
    get:
      summary: Get an order by ID
      tags: [Orders]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The order ID
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailDto'
        '404':
          description: Order not found
        '500':
          description: Server error
    put:
      summary: Update an existing order
      tags: [Orders]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                      quantity:
                        type: integer
      responses:
        '200':
          description: The updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailDto'
        '400':
          description: Invalid input
        '404':
          description: Order not found
        '500':
          description: Server error
    delete:
      summary: Delete an order by ID
      tags: [Orders]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The order ID
      responses:
        '200':
          description: Success message after deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the deletion was successful
        '404':
          description: Order not found
        '500':
          description: Server error
  /products:
    get:
      summary: Retrieve a list of products
      tags: [Products]
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Server error
components:
  schemas:
    PaginatedOrdersResponse:
      type: object
      properties:
        total:
          type: integer
          description: Total number of orders
        pages:
          type: integer
          description: Total number of pages
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderSummaryDto'
    OrderSummaryDto:
      type: object
      properties:
        orderId:
          type: string
          description: The ID of the order
        customerName:
          type: string
          description: The name of the customer
        totalProducts:
          type: integer
          description: The total number of products in the order
        totalPrice:
          type: integer
          description: The total price of the order
        orderDate:
          type: string
          format: date-time
          description: The date the order was created
    OrderDetailDto:
      type: object
      properties:
        orderId:
          type: string
          description: The ID of the order
        customerName:
          type: string
          description: The name of the customer
        totalPrice:
          type: integer
          description: The total price of the order
        orderDate:
          type: string
          format: date-time
          description: The date the order was created
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderProductDetailDto'
    OrderProductDetailDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the product
        price:
          type: integer
          description: The price of the product
        quantity:
          type: integer
          description: The quantity of the product ordered
        totalProductPrice:
          type: integer
          description: The total price for this product (price * quantity)
    Product:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the product
        name:
          type: string
          description: The name of the product
        price:
          type: integer
          description: The price of the product